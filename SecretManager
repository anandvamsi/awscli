#SecretManager


Need to Secret Manager
- I want to prevent dev from viewing or sharing the secret.
- I want the visibility in to who used which secret when
- I want to rollout secrets safely
- I want to rorte secrets without system down time

SM enable customer 
- Manager
- retrive 
and rotate database creds,API keys and other secrets through their lifecycle.



Audience
-------
IT Admin :- store and manage access to secrets and at scale
Secuity Admins:- Audit and monitor the use of secrets and rotate secrets without of risk of breaking application.
Developers:- Avoid delaing with secrets in their application



Service provided by AWS to store secrets :- password,crednetial 
secrets manager allows you to store and manage access to these secreat manager
secrets Manager enabled you to replace harcoded credentials in your code with API calls to secret Manager to retrive the secret programmatically.
Secret Manager allows you to change or rotate your crednetials easily there by avoiding any code or config changes.

secrets manager allows you to store and manage access to these secreat manager
- secrets Manager enabled you to replace harcoded credentials in your code with API calls to secret Manager to retrive the secret programmatically.

- Secret Manager allows you to change or rotate your crednetials easily there by avoiding any code or config changes.




How Secret Manager Works
-------------------------
step1
The rotation function contacts the secured service authentication system and creates a new set of credentials to access the database. 
The credentials typically consist of a user name, a password, and connection details, but can vary from system to system. 
Secrets Manager stores these new credentials as the secret text in a new version of the secret with the AWSPENDING staging label attached.

step2
The rotation function then tests the AWSPENDING version of the secret to ensure that the credentials work, and grants the required level of access to the secured service.

step 3
If the tests succeed, the rotation function then moves the label AWSCURRENT to the new version to mark it as the default version. Then, all of the clients start using this version of the secret instead of the old version. The function also assigns the label AWSPREVIOUS to the old version, which marks it as the "last known good" version. 
The version with the AWSPREVIOUS staging label now has no label, and therefore deprecated.






make sure you have AWSCLI 1.15+

 /usr/local/bin/aws secretsmanager describe-secret --secret-id DTpassword --region us-west-2
{
    "Name": "DTpassword",
    "VersionIdsToStages": {
        "629d15aa-1f2d-4033-9833-XXXXXX": [
            "AWSCURRENT"
        ]
    },
    "Tags": [
        {
            "Value": "DT",
            "Key": "Name"
        }
    ],
    "LastChangedDate": 1621508611.372,
    "LastAccessedDate": 1621468800.0,
    "ARN": "arn:aws:secretsmanager:us-west-2:210083101852:secret:DTpassword-itUipk",
    "Description": "Password for DT application"
}


##To retrive the secret
/usr/local/bin/aws secretsmanager get-secret-value --secret-id DTpassword --version-s
tage AWSCURRENT --region us-west-2
{
    "Name": "DTpassword",
    "VersionId": "629d15aa-1f2d-4033-9833-XXXXXXX",
    "SecretString": "{\"password\":\"Pass@123\"}",
    "VersionStages": [
        "AWSCURRENT"
    ],
    "CreatedDate": 1621506427.604,
    "ARN": "arn:aws:secretsmanager:us-west-2:XXXXXXX:secret:DTpassword-itUipk"
}
